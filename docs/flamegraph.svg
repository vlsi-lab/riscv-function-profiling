<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326">


<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">

	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x &amp;&amp; params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el &amp;&amp; el.attributes &amp;&amp; el.attributes.y &amp;&amp; el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey &amp;&amp; e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey &amp;&amp; e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&amp;');
		for (var i = 0; i &lt; paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&amp;';
		}
		if (uri.slice(-1) == "&amp;")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w &lt; 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl &lt; w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x &gt; 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) &lt;= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i &lt; c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i &lt; c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i &lt; c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i &lt; el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) &gt; ymin;
			} else {
				upstack = parseFloat(a.y.value) &lt; ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex &lt;= xmin &amp;&amp; (ex+ew+fudge) &gt;= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex &lt; xmin || ex + fudge &gt;= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i &lt; el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i &lt; el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i &lt; el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w &gt; maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w &gt; matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x &gt;= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}

</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="none" />
<text id="title" x="600.00" y="24">Flame Chart</text>
<text id="details" x="10.00" y="309"> </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24">Search</text>
<text id="ignorecase" x="1174.00" y="24">ic</text>
<text id="matched" x="1090.00" y="309"> </text>
<g id="frames">
<g>
<title>_ZN7MyClass10printValueEv (44,866 samples, 44.12%)</title><rect x="10.4" y="229" width="520.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="13.37" y="239.5" style="fill:white">_ZN7MyClass10printValueEv</text>
</g>
<g>
<title>printf (41,331 samples, 40.65%)</title><rect x="51.4" y="213" width="479.6" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="54.39" y="223.5" style="fill:white">printf</text>
</g>
<g>
<title>iprintf (41,331 samples, 40.65%)</title><rect x="51.4" y="197" width="479.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="54.39" y="207.5" style="fill:white">iprintf</text>
</g>
<g>
<title>_malloc_r (167 samples, 0.16%)</title><rect x="12.9" y="149" width="1.9" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="15.88" y="159.5" style="fill:white" />
</g>
<g>
<title>__udivdi3 (134 samples, 0.13%)</title><rect x="1045.7" y="53" width="1.5" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="1048.67" y="63.5" style="fill:white" />
</g>
<g>
<title>_sbrk (15 samples, 0.01%)</title><rect x="55.9" y="101" width="0.2" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="58.88" y="111.5" style="fill:white" />
</g>
<g>
<title>_sbrk (15 samples, 0.01%)</title><rect x="13.9" y="117" width="0.2" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="16.92" y="127.5" style="fill:white" />
</g>
<g>
<title>_sbrk_r (41 samples, 0.04%)</title><rect x="55.6" y="117" width="0.5" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="58.58" y="127.5" style="fill:white" />
</g>
<g>
<title>_write_r (3,826 samples, 3.76%)</title><rect x="1145.6" y="149" width="44.4" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="1148.60" y="159.5" style="fill:black">_wri..</text>
</g>
<g>
<title>__swrite (3,866 samples, 3.80%)</title><rect x="1145.1" y="165" width="44.9" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="1148.14" y="175.5" style="fill:white">__sw..</text>
</g>
<g>
<title>__sinit (3,503 samples, 3.44%)</title><rect x="10.7" y="197" width="40.7" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="13.74" y="207.5" style="fill:black">__s..</text>
</g>
<g>
<title>__swbuf_r (39,532 samples, 38.88%)</title><rect x="71.4" y="117" width="458.8" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="74.43" y="127.5" style="fill:white">__swbuf_r</text>
</g>
<g>
<title>_printf_i (508 samples, 0.50%)</title><rect x="539.6" y="165" width="5.9" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="542.58" y="175.5" style="fill:white" />
</g>
<g>
<title>_cleanup_r (4,012 samples, 3.95%)</title><rect x="1048.1" y="229" width="46.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="1051.14" y="239.5" style="fill:white">_cle..</text>
</g>
<g>
<title>__swrite (42,916 samples, 42.20%)</title><rect x="549.2" y="85" width="498.0" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="552.21" y="95.5" style="fill:white">__swrite</text>
</g>
<g>
<title>exit (12,225 samples, 12.02%)</title><rect x="1048.1" y="245" width="141.9" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="1051.14" y="255.5" style="fill:white">exit</text>
</g>
<g>
<title>__sfputs_r (39,625 samples, 38.97%)</title><rect x="70.6" y="149" width="459.8" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="73.61" y="159.5" style="fill:white">__sfputs_r</text>
</g>
<g>
<title>__smakebuf_r (297 samples, 0.29%)</title><rect x="53.1" y="149" width="3.5" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="56.14" y="159.5" style="fill:white" />
</g>
<g>
<title>_malloc_r (119 samples, 0.12%)</title><rect x="54.9" y="133" width="1.4" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="57.87" y="143.5" style="fill:white" />
</g>
<g>
<title>__sfputc_r (154 samples, 0.15%)</title><rect x="534.8" y="165" width="1.8" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="537.80" y="175.5" style="fill:white" />
</g>
<g>
<title>memset (52 samples, 0.05%)</title><rect x="45.5" y="165" width="0.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="48.46" y="175.5" style="fill:white" />
</g>
<g>
<title>__sflush_r (39,398 samples, 38.74%)</title><rect x="73.0" y="85" width="457.2" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="75.99" y="95.5" style="fill:white">__sflush_r</text>
</g>
<g>
<title>memset (50 samples, 0.05%)</title><rect x="49.6" y="165" width="0.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="52.64" y="175.5" style="fill:white" />
</g>
<g>
<title>__sfputs_r (102 samples, 0.10%)</title><rect x="544.3" y="149" width="1.2" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="547.29" y="159.5" style="fill:white" />
</g>
<g>
<title>memchr (36 samples, 0.04%)</title><rect x="538.1" y="165" width="0.4" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="541.12" y="175.5" style="fill:black" />
</g>
<g>
<title>__sfputs_r (30 samples, 0.03%)</title><rect x="543.9" y="133" width="0.4" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="546.95" y="143.5" style="fill:white" />
</g>
<g>
<title>_vfiprintf_r (44,071 samples, 43.34%)</title><rect x="536.6" y="181" width="511.4" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="539.59" y="191.5" style="fill:white">_vfiprintf_r</text>
</g>
<g>
<title>_vfprintf_r (40,878 samples, 40.20%)</title><rect x="56.6" y="181" width="474.3" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="59.59" y="191.5" style="fill:white">_vfprintf_r</text>
</g>
<g>
<title>memset (52 samples, 0.05%)</title><rect x="47.3" y="165" width="0.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="50.27" y="175.5" style="fill:white" />
</g>
<g>
<title>memchr (36 samples, 0.04%)</title><rect x="62.7" y="149" width="0.4" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="65.66" y="159.5" style="fill:black" />
</g>
<g>
<title>__sfputs_r (30 samples, 0.03%)</title><rect x="68.5" y="117" width="0.3" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="71.49" y="127.5" style="fill:white" />
</g>
<g>
<title>iprintf (44,545 samples, 43.81%)</title><rect x="531.1" y="213" width="516.9" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="534.09" y="223.5" style="fill:white">iprintf</text>
</g>
<g>
<title>all (101,687 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="13.00" y="287.5" style="fill:white" />
</g>
<g>
<title>_write_r (42,876 samples, 42.16%)</title><rect x="549.7" y="69" width="497.5" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="552.68" y="79.5" style="fill:black">_write_r</text>
</g>
<g>
<title>__sfputc_r (43,151 samples, 42.44%)</title><rect x="546.7" y="149" width="500.8" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="549.74" y="159.5" style="fill:white">__sfputc_r</text>
</g>
<g>
<title>memset (50 samples, 0.05%)</title><rect x="48.5" y="165" width="0.5" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="51.47" y="175.5" style="fill:white" />
</g>
<g>
<title>main (89,462 samples, 87.98%)</title><rect x="10.0" y="245" width="1038.1" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="13.00" y="255.5" style="fill:white">main</text>
</g>
<g>
<title>__call_exitprocs (113 samples, 0.11%)</title><rect x="1094.7" y="229" width="1.3" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="1097.69" y="239.5" style="fill:black" />
</g>
<g>
<title>__sfmoreglue (2,701 samples, 2.66%)</title><rect x="12.5" y="165" width="31.3" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="15.46" y="175.5" style="fill:white">__..</text>
</g>
<g>
<title>__udivdi3 (134 samples, 0.13%)</title><rect x="1188.4" y="133" width="1.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="1191.45" y="143.5" style="fill:white" />
</g>
<g>
<title>__swsetup_r (379 samples, 0.37%)</title><rect x="52.2" y="165" width="4.4" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="55.19" y="175.5" style="fill:white" />
</g>
<g>
<title>_sbrk_r (82 samples, 0.08%)</title><rect x="13.6" y="133" width="1.0" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="16.62" y="143.5" style="fill:white" />
</g>
<g>
<title>__sfputc_r (154 samples, 0.15%)</title><rect x="59.3" y="133" width="1.8" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="62.34" y="143.5" style="fill:white" />
</g>
<g>
<title>__sflush_r (3,932 samples, 3.87%)</title><rect x="1144.4" y="181" width="45.6" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="1147.37" y="191.5" style="fill:white">__sf..</text>
</g>
<g>
<title>_ZN7MyClass10printValueEv (44,555 samples, 43.82%)</title><rect x="531.0" y="229" width="517.1" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="534.03" y="239.5" style="fill:white">_ZN7MyClass10printValueEv</text>
</g>
<g>
<title>memchr (56 samples, 0.06%)</title><rect x="61.5" y="149" width="0.6" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="64.49" y="159.5" style="fill:black" />
</g>
<g>
<title>_vfiprintf_r (443 samples, 0.44%)</title><rect x="531.4" y="197" width="5.2" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="534.45" y="207.5" style="fill:white" />
</g>
<g>
<title>__sfputs_r (43,209 samples, 42.49%)</title><rect x="546.1" y="165" width="501.4" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="549.07" y="175.5" style="fill:white">__sfputs_r</text>
</g>
<g>
<title>std (303 samples, 0.30%)</title><rect x="47.9" y="181" width="3.5" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="50.88" y="191.5" style="fill:black" />
</g>
<g>
<title>__udivdi3 (134 samples, 0.13%)</title><rect x="528.6" y="37" width="1.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="531.62" y="47.5" style="fill:white" />
</g>
<g>
<title>_printf_common (134 samples, 0.13%)</title><rect x="542.7" y="149" width="1.6" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="545.74" y="159.5" style="fill:white" />
</g>
<g>
<title>memset (50 samples, 0.05%)</title><rect x="50.8" y="165" width="0.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="53.81" y="175.5" style="fill:white" />
</g>
<g>
<title>__swhatbuf_r (74 samples, 0.07%)</title><rect x="54.0" y="133" width="0.9" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="57.01" y="143.5" style="fill:white" />
</g>
<g>
<title>memchr (56 samples, 0.06%)</title><rect x="536.9" y="165" width="0.7" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="539.95" y="175.5" style="fill:black" />
</g>
<g>
<title>__sfputs_r (282 samples, 0.28%)</title><rect x="57.9" y="149" width="3.2" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="60.86" y="159.5" style="fill:white" />
</g>
<g>
<title>__sfputs_r (282 samples, 0.28%)</title><rect x="533.3" y="181" width="3.3" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="536.32" y="191.5" style="fill:white" />
</g>
<g>
<title>memset (2,498 samples, 2.46%)</title><rect x="14.8" y="149" width="29.0" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="17.82" y="159.5" style="fill:white">me..</text>
</g>
<g>
<title>_write_r (39,292 samples, 38.64%)</title><rect x="74.2" y="53" width="456.0" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="77.22" y="63.5" style="fill:black">_write_r</text>
</g>
<g>
<title>__sfputc_r (44 samples, 0.04%)</title><rect x="69.5" y="117" width="0.5" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="72.51" y="127.5" style="fill:white" />
</g>
<g>
<title>_fflush_r (43,021 samples, 42.31%)</title><rect x="548.0" y="117" width="499.2" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="551.00" y="127.5" style="fill:black">_fflush_r</text>
</g>
<g>
<title>__sfp (3,141 samples, 3.09%)</title><rect x="11.4" y="181" width="36.5" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="14.43" y="191.5" style="fill:white">__sfp</text>
</g>
<g>
<title>iprintf (3,530 samples, 3.47%)</title><rect x="10.4" y="213" width="41.0" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="13.43" y="223.5" style="fill:white">ipr..</text>
</g>
<g>
<title>__sfputs_r (102 samples, 0.10%)</title><rect x="68.8" y="133" width="1.2" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="71.83" y="143.5" style="fill:white" />
</g>
<g>
<title>_isatty_r (29 samples, 0.03%)</title><rect x="56.3" y="133" width="0.3" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="59.25" y="143.5" style="fill:white" />
</g>
<g>
<title>_vfiprintf_r (440 samples, 0.43%)</title><rect x="51.5" y="181" width="5.1" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="54.49" y="191.5" style="fill:white" />
</g>
<g>
<title>__swbuf_r (43,116 samples, 42.40%)</title><rect x="546.9" y="133" width="500.3" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="549.89" y="143.5" style="fill:white">__swbuf_r</text>
</g>
<g>
<title>_fwalk_reent (8,100 samples, 7.97%)</title><rect x="1096.0" y="213" width="94.0" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="1099.01" y="223.5" style="fill:black">_fwalk_reent</text>
</g>
<g>
<title>__sfputc_r (39,567 samples, 38.91%)</title><rect x="71.3" y="133" width="459.1" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="74.28" y="143.5" style="fill:white">__sfputc_r</text>
</g>
<g>
<title>_printf_common (134 samples, 0.13%)</title><rect x="67.3" y="133" width="1.5" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="70.28" y="143.5" style="fill:white" />
</g>
<g>
<title>_start (101,687 samples, 100.00%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="13.00" y="271.5" style="fill:black">_start</text>
</g>
<g>
<title>_vfprintf_r (44,071 samples, 43.34%)</title><rect x="536.6" y="197" width="511.4" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="539.59" y="207.5" style="fill:white">_vfprintf_r</text>
</g>
<g>
<title>__sfputc_r (44 samples, 0.04%)</title><rect x="545.0" y="133" width="0.5" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="547.97" y="143.5" style="fill:white" />
</g>
<g>
<title>_vfiprintf_r (40,878 samples, 40.20%)</title><rect x="56.6" y="165" width="474.3" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="59.59" y="175.5" style="fill:white">_vfiprintf_r</text>
</g>
<g>
<title>_fflush_r (3,979 samples, 3.91%)</title><rect x="1143.8" y="197" width="46.2" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="1146.83" y="207.5" style="fill:black">_ffl..</text>
</g>
<g>
<title>_fflush_r (39,437 samples, 38.78%)</title><rect x="72.5" y="101" width="457.7" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="75.54" y="111.5" style="fill:black">_fflush_r</text>
</g>
<g>
<title>_fstat_r (31 samples, 0.03%)</title><rect x="54.5" y="117" width="0.4" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="57.51" y="127.5" style="fill:white" />
</g>
<g>
<title>__swrite (39,332 samples, 38.68%)</title><rect x="73.8" y="69" width="456.4" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="76.75" y="79.5" style="fill:white">__swrite</text>
</g>
<g>
<title>_printf_i (508 samples, 0.50%)</title><rect x="64.1" y="149" width="5.9" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="67.12" y="159.5" style="fill:white" />
</g>
<g>
<title>memchr (66 samples, 0.06%)</title><rect x="538.7" y="165" width="0.8" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="541.70" y="175.5" style="fill:black" />
</g>
<g>
<title>memchr (66 samples, 0.06%)</title><rect x="63.2" y="149" width="0.8" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text x="66.24" y="159.5" style="fill:black" />
</g>
<g>
<title>__sflush_r (42,982 samples, 42.27%)</title><rect x="548.4" y="101" width="498.8" height="15.0" fill="rgb(0,116,128)" rx="2" ry="2" />
<text x="551.45" y="111.5" style="fill:white">__sflush_r</text>
</g>
<g>
<title>memset (52 samples, 0.05%)</title><rect x="43.8" y="165" width="0.6" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="46.80" y="175.5" style="fill:white" />
</g>
<g>
<title>_cleanup_r (8,100 samples, 7.97%)</title><rect x="1096.0" y="229" width="94.0" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="1099.01" y="239.5" style="fill:white">_cleanup_r</text>
</g>
<g>
<title>_sbrk (15 samples, 0.01%)</title><rect x="14.4" y="117" width="0.2" height="15.0" fill="rgb(109,26,54)" rx="2" ry="2" />
<text x="17.40" y="127.5" style="fill:white" />
</g>
<g>
<title>__libc_fini_array (24 samples, 0.02%)</title><rect x="1095.7" y="213" width="0.3" height="15.0" fill="rgb(57,57,58)" rx="2" ry="2" />
<text x="1098.73" y="223.5" style="fill:white" />
</g>
</g>
</svg>